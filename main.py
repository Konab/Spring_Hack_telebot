# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telebot import TeleBot
from config import Config
from telebot import types
import requests
import json
from dataclasses import dataclass


@dataclass
class Query:
	client_type: str = ''
	service: str = ''
	geo: str = ''

	def remove(self):
		self.client_type = ''
		self.service = ''
		self.geo = ''

	def update(self, client_type='', service='', geo=''):
		if client_type:
			self.client_type = client_type
		if service:
			self.service = service
		if geo:
			self.geo = geo


# –°–ª–æ–≤–∞—Ä–∏–∫ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö –º–µ–Ω—é)
BaseKeyboards = {
	'get_help': 'üíÅ‚Äç‚ôÄÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
	'get_phone': '‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –±–∞–Ω–∫–∞'
}
# –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
ClientTypeKeyboards = {
	'set_individual': 'üßë –ß–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–∞–º',
	'set_entity': 'üë®‚Äçüíª –ë–∏–∑–Ω–µ—Å—É'
}
# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –æ—Ç –±–æ—Ç–∞
ServiceTypeKeyboards = {
	'get_enroll': '‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º',
	'get_dialog': 'üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'
}

Change = {
	'individual': 'üßë –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–∑–º–µ–Ω–∏—Ç—å',
	'entity': 'üë®‚Äçüíª –Æ—Ä. –ª–∏—Ü–æ: –ò–∑–º–µ–Ω–∏—Ç—å'
}


def set_client_type_keyboard(query, markup):
	if query.client_type == 'individual':
		markup.row(types.KeyboardButton(Change[query.client_type]))
	elif query.client_type == 'entity':
		markup.row(types.KeyboardButton(Change[query.client_type]))
	else:
		markup.row(
				types.KeyboardButton(ClientTypeKeyboards['set_individual']),
				types.KeyboardButton(ClientTypeKeyboards['set_entity'])
			)
	return markup


def set_service_type_keyboard(query, markup):
	if query.service == 'enroll':
		pass
	elif query.service == 'dialog':
		pass
	else:
		for key in ServiceTypeKeyboards:
					markup.row(types.KeyboardButton(ServiceTypeKeyboards[key]))
	return markup


def set_base_keyboard(markup):
	markup.row(
			types.KeyboardButton(BaseKeyboards['get_help']),
			types.KeyboardButton(BaseKeyboards['get_phone'])
		)
	return markup


def set_keyboard(query):
	# –û–±—ä–µ–∫—Ç –º–∞–∫–µ—Ç–∞ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
	markup = types.ReplyKeyboardMarkup()
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
	markup = set_client_type_keyboard(query, markup)
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
	markup = set_service_type_keyboard(query, markup)
	# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	markup = set_base_keyboard(markup)
	return markup


def api_request(api, method):
	'--> –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
	return requests.get('{}{}'.format(api, method)).json()


def get_help():
	return '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n–Ø - –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã 51—Å –¥–ª—è –±–∞–Ω–∫–∞ *¬´–£—Ä–∞–ª—Å–∏–±¬ª*.\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.'


def get_phone(type=None):
	individual_phone = '*–ß–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–∞–º:* 8 (495) 723-77-77'
	entity_phone = '*–ë–∏–∑–Ω–µ—Å—É:* 8 (800) 700-77-16'
	if type == 'individual':
		return individual_phone
	elif type == 'entity':
		return entity_phone
	else:
		return individual_phone + '\n' + entity_phone


if __name__ == '__main__':
	#–ë–µ—Ä–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
	bot = TeleBot(Config.TOKEN)
	API = 'http://127.0.0.1:5000/'
	query = Query()


	def send_menu_col(chat_id, text=''):
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–ª–µ–≥—Ä–∞–º—É
		markup = set_keyboard(query)
		if text:
			bot.send_message(chat_id, text, reply_markup=markup)
		else:
			bot.send_message(chat_id, '–ö–∞–∫ –í–∞–º –ø–æ–º–æ—á—å?', reply_markup=markup)


	@bot.message_handler(commands=['start'])
	def start_handler(messege):
		# –û–±–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/start'
		print('::> Start by user: {}, id: {}'.format(messege.from_user.first_name, messege.chat.id))
		bot.send_message(messege.chat.id, 'Hello, *{}*'.format(messege.from_user.first_name), parse_mode='markdown')
		send_menu_col(messege.chat.id)
		query.remove()


	@bot.message_handler(commands=['info'])
	def info_handler(messege):
		# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/info'
		print('::> Info by user: {}, id: {}'.format(messege.from_user.first_name, messege.chat.id))


	@bot.message_handler(content_types=['text'])
	def menu_handler(messege):
		# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç–∞
		if messege.text == BaseKeyboards['get_help']:
			print('>> get_help')
			bot.send_message(messege.chat.id, get_help(), parse_mode='markdown')
			# print(api_request(API, 'get_help'))
		elif messege.text == BaseKeyboards['get_phone']:
			print('>> get_phone')
			bot.send_message(messege.chat.id, get_phone(), parse_mode='markdown')
			# print(api_request(API, 'get_phone'))
		elif messege.text == ClientTypeKeyboards['set_individual']:
			print('>> set_individual')
			query.client_type = 'individual'
			send_menu_col(messege.chat.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: *–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ*')
			# print(api_request(API, 'set_individual'))
		elif messege.text == ClientTypeKeyboards['set_entity']:
			print('>> set_entity')
			query.client_type = 'entity'
			send_menu_col(messege.chat.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: *–Æ—Ä. –ª–∏—Ü–æ*')
			# print(api_request(API, 'set_entity'))
		elif messege.text == ServiceTypeKeyboards['get_enroll']:
			print('>> get_enroll')
			# print(api_request(API, 'get_enroll'))
		elif messege.text == ServiceTypeKeyboards['get_dialog']:
			print('>> get_dialog')
			# print(api_request(API, 'get_dialog'))
		elif messege.text == Change['individual']:

		elif messege.text == Change['entity']:
			pass

	# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	print('--> –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞')
	bot.polling(True)
